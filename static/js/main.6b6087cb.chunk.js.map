{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","robot","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","robotsName","onSearchChange","event","setState","searchfield","target","value","state","console","log","a","fetch","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kECQCQ,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACxB,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,gBACpD,gCACE,6BAAKL,IACL,4BAAIC,WCSGK,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,8BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAO,cAAC,EAAD,CAAMR,GAAIO,EAAMP,GAAIF,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,OAAYS,SCC/DC,EAPG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,uBAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,EAC3DT,UAAU,mCCMCa,EATA,SAACC,GAEd,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAS,kBAAmBC,OAAS,SAAvE,SACGJ,EAAMK,YC6FEC,G,wDAxFb,aAAc,IAAD,8BACX,gBAHFC,WAAa,GAEA,EAUbC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAT1C,EAAKC,MAAQ,CACXxB,OAAS,GACTqB,YAAc,IAGhBI,QAAQC,IAAI,gBAPD,E,4FAcb,iCAAAC,EAAA,6DAEEF,QAAQC,IAAI,eAFd,SAIQE,MAAM,8CACX1C,MAAK,SAAA2C,GACJ,OAAOA,EAASC,UAEjB5C,MAAK,SAAA6C,GACJ,EAAKX,SAAS,CAACpB,OAAS+B,OAT5B,OAYEN,QAAQC,IAAI,wBAZd,2C,0EAgBA,WAAS,IAAD,OAEND,QAAQC,IAAI,iBAGZ,IAAMM,EAAiBC,KAAKT,MAAMxB,OAAOkC,QAAO,SAAChC,GAC/C,OAAOA,EAAMT,KAAK0C,cAAcC,SAAS,EAAKZ,MAAMH,YAAYc,kBAGlE,OACE,sBAAKvC,UAAU,KAAf,UACE,0CACA,cAAC,EAAD,CAAWS,aAAgB4B,KAAKf,iBAChC,6BAAKe,KAAKhB,aACV,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,OAAQgC,a,GAjDVK,cC0BlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAE,EAAF,MAEFC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.6b6087cb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n  return(\r\n    <div className=' tc bg-light-green dib br3 pa3 grow ma2 shadow-2'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robotsImage\"/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot,i) => {\r\n        return <Card id={robot.id} name={robot.name} email={robot.email} key={i}/>\r\n      })\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <input type=\"search\" placeholder=\"Search robots\" onChange={searchChange} \r\n    className=\"pa3 ba b-green bg-light-blue \"/>  \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  \r\n  return (\r\n    <div style={{overflowY: 'scroll', border : '3px solid black', height : '500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from \"./SearchBox\";\r\nimport Scroll from './Scroll';\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends Component{\r\n\r\n  robotsName = [];\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      robots : [],\r\n      searchfield : ''\r\n    }\r\n\r\n    console.log(\"Constructor!\")\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield : event.target.value});\r\n  }\r\n\r\n  async componentDidMount(){\r\n\r\n    console.log(\"Inside will\");\r\n    \r\n    await fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n      return response.json()\r\n    })\r\n    .then(users => {\r\n      this.setState({robots : users});\r\n    })\r\n\r\n    console.log(\"After setting state!\");\r\n  }\r\n\r\n\r\n  render(){\r\n\r\n    console.log(\"Render runned\");\r\n\r\n\r\n    const filteredRobots = this.state.robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n\r\n    return(\r\n      <div className=\"tc\">\r\n        <h1>Robofans</h1>{/*You need to change this message when no robots name matches! */}\r\n        <SearchBox searchChange = {this.onSearchChange}/>\r\n        <h1>{this.robotsName}</h1>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\n// class App extends Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state = {\r\n//       name:\"Tirth\"\r\n//     }\r\n//     console.log(\"Inside Constructor!\");\r\n//   }\r\n  \r\n//   componentWillMount(){\r\n//     console.log(\"Inside component will mount!\");\r\n//     setTimeout(() => {\r\n//       await this.setState({name : \"Arafat will\"});\r\n//       console.log(\"Inside setTimeout\");\r\n//     },3000)\r\n//     console.log(\"I WILL 2\");\r\n//   }\r\n\r\n//   componentDidMount(){\r\n//     console.log(\"Inside component did mount!\");\r\n//     setTimeout(() => {\r\n//       this.setState({name : \"Rekha did\"});\r\n//     },1000)\r\n//   }\r\n\r\n//   render(){\r\n//     console.log(\"Inside Render!\");\r\n//     return (\r\n//       <h1>Hello world this is {this.state.name}</h1>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport tachyons from 'tachyons';\r\nimport App from './App';\r\n\r\n// const Layout = (props) => {\r\n\r\n//   console.log(props.children);\r\n//   return (\r\n//     <div>\r\n//       <header>My Header</header>\r\n//       <main>{props.children[0]}</main>\r\n//       <h1>I am a third child!</h1>\r\n      \r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// const App = () => {\r\n//   return(\r\n//     <div>\r\n//       <Layout> \r\n//         <h1>I am First Child</h1>\r\n//         <h1>I am Second Child</h1>\r\n//       </Layout>\r\n//     </div>\r\n    \r\n//   )\r\n// }\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    < App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}